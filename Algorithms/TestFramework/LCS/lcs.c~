#include <stdio.h>
#include <math.h>
#include <stdlib.h>
#include <time.h>

// suppose we were experimentally studying the performance of an algorithm for search a string...
// this is our function to test

int lcs (char *s1, char *s2){
    int i,j,k,lcsLen;
    for(i=0; s1[i]!=0; i++){
        for(j=0; s2[j]!=0; j++){
            for(k=0; s1[i+k]!=0 && s2[j+k]!=0; k++){
                   if(s1[i+k] != s2[i+k])break;
            }
            if (k > lcsLen){
                lcsLen=k;
            }
        }
    }
    return lcsLen;
}


// function to create randomized input to test out "algorithm" function
void generateSampleInput(char *testString1, char *testString2, int stringSize) {
    int i;
    // get rand int, module the range size, + the starting number...
    // this give random ints from: 32..127
    //*testChar = rand() % 95 + 32; // look up ascii code -- 32 for space, 1st printable char

    for(i=0;i<stringSize; i++) {
        testString1[i] = rand() % 95 + 32;
        testString2[i] = rand() % 95 + 32;
    }
   // testString[stringSize] = 0; // sets the null terminator at end of our string
}

void generateWorstCaseSampleInput(char *testString1, char *testString2, int stringSize) {
    int i;
    // get rand int, module the range size, + the starting number...
    // this give random ints from: 32..127
    //*testChar = rand() % 95 + 32; // look up ascii code -- 32 for space, 1st printable char


    for(i=0;i<stringSize; i++) {
        testString1[i] = 'A';
        testString2[i] = 'A';
    }
   testString1[stringSize] = 0; // sets the null terminator at end of our string
   testString2[stringSize] = 0; 
}


#define numberOfSizes 8

/// function to create a string of random char or a given length

int main (int argc, int argv) {

    int sizeIndex,trial,numberFound;
    clock_t start, stop; // clock_t defined time.h lib
    double interval;     // this will be the runtime of our function
    double totalTimePerInputSize, averageTimePerInputSize;
    char testSearchString1[1000001]; 
    char testSearchString2[1000001]; 
    char testSearchChar;

    printf("# Performance Data for LCS implementation\n");
    printf("# Column Headers\n");
    printf("# Input Size(N)     Time(T)\n");

    // set range or specific list of input sizes we want to test
    int sizesOfInput[numberOfSizes] = { 10, 20, 40, 80, 160, 320, 640, 1280};   
	// set number of trials per input size (to get average results, maybe other statistics)
    int trialsPerSize = 4;
	// For each size N of input we want to test
    for (sizeIndex=0;sizeIndex<numberOfSizes;sizeIndex++) {
	    // For each trial trialNumber=1 to Number of Trials per input size:
        for (trial=0;trial<trialsPerSize;trial++) {
            // **** Generate sampleInput -- create a string of random characters...
            generateWorstCaseSampleInput (&testSearchString1, &testSearchString2, sizesOfInput[sizeIndex] );

            // set startingTimeStamp
            start = clock(); // clock funciton from time.h lib, (or ctime in C++)

            // **** Call functionWeAreTesting with sampleInput as input
            numberFound = lcs(testSearchString1, testSearchString2);

            // set endingTimeStamp
            stop = clock();
            // let runtime = endingTimeStamp - startingTimeStamp
            interval = (stop-start) / (double)CLOCKS_PER_SEC; // CLOCK_PER_SEC define time.h 
            // print trial data:  N, trialNumber, runtime 
            printf("Input Size: %d, trial: %d, Run Time: %lf \n",sizesOfInput[sizeIndex],trial,interval); 
            // (possibly other info, such as the input used)
            // Accumulate aggregates, such asâ€¦
            //						} totalTime = totalTime+runTime;
            //						} totalTimeSquared = totalTimeSquared + runTime*runTime;
            totalTimePerInputSize = totalTimePerInputSize + interval;
 
        }
        averageTimePerInputSize = totalTimePerInputSize / trialsPerSize;
        printf("%d      %lf\n", sizesOfInput[sizeIndex], averageTimePerInputSize);
        // Print aggregate results for input size N:
	    //  N
	    //  average run time
	    // total time? number trials?
    }
}

//////////////////////////////////
/////////////////////////////////
